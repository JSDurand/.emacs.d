* Purpose
  I want to write my own special minor mode for working with tex
  files. And this should replace auctex so that I can be freed from
  the burden of that heavy package.
* Contents
** Key bindings
   Some keys that I am used to.
   The most important bindings are of course to insert math symbols.

   #+BEGIN_SRC emacs-lisp
     (defun tex ()
       "my own command to compile tex"
       (interactive)
       (call-process "/bin/bash" nil nil nil "-c" (format "xetex %s" (shell-quote-argument buffer-file-name))))

     ;;  (use-package auctex
     ;;    :defer t
     ;;    :ensure t
     ;;    :config
     ;;    (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
     ;;    (add-hook 'TeX-mode-hook 'LaTeX-math-mode)
     ;;    (customize-set-variable 'LaTeX-math-abbrev-prefix (kbd "£"))
     ;;    (add-hook 'TeX-mode-hook '(lambda ()
     ;;				(define-key TeX-mode-map [?\§] '(lambda () "remap to type escape key" (interactive) (insert "\\")))
     ;;				(define-key TeX-mode-map [f9] 'tex)
     ;;				(define-key TeX-mode-map [?\)] 'end-exit-paren)
     ;;				(define-key TeX-mode-map [?\(] 'open-paren)
     ;;				(define-key TeX-mode-map [?\C-c ?d] 'insert-def)
     ;;				(define-key TeX-mode-map [?\C-c ?o] 'one-def)
     ;;				(define-key TeX-mode-map [?\C-c ?t] 'two-def)
     ;;				(define-key TeX-mode-map [?\C-c ?r] 'read-tex-complete))))
     (with-eval-after-load "tex-mode"
       (define-key plain-tex-mode-map [?\§] '(lambda () "remap to type escape key" (interactive) (insert "\\")))
       (define-key plain-tex-mode-map [f9] 'tex)
       (define-key plain-tex-mode-map [?\)] 'end-exit-paren)
       (define-key plain-tex-mode-map [?\(] 'open-paren)
       (define-key plain-tex-mode-map [?\{] 'open-curly)
       (define-key plain-tex-mode-map [?\C-c ?d] 'insert-def)
       (define-key plain-tex-mode-map [?\C-c ?o] 'one-def)
       (define-key plain-tex-mode-map [?\C-c ?t] 'two-def)
       (define-key plain-tex-mode-map [?\C-c ?r] 'read-tex-complete)
       (define-key plain-tex-mode-map [?\C-c ?\C-o] 'make-blank-space)
       (define-key plain-tex-mode-map [?\C-c ?\C-\S-o] '(lambda () (interactive) (make-blank-space 4)))
       (define-key plain-tex-mode-map [?\M-'] 'abbrev-prefix-mark)
       (define-key plain-tex-mode-map [?ù] 'setup-abbrevs)
       (add-hook 'tex-mode-hook '(lambda () (abbrev-mode 1))))

     (setq abbrev-pairs
	   (list
	    '("a" "\\alpha")
	    '("b" "\\beta")
	    '("g" "\\gamma")
	    '("d" "\\delta")
	    '("D" "\\Delta")
	    '("e" "\\epsilon")
	    '("z" "\\zeta")
	    '("h" "\\eta")
	    '("j" "\\theta")
	    '("k" "\\kappa")
	    '("l" "\\lambda")
	    '("m" "\\mu")
	    '("n" "\\nu")
	    '("x" "\\xi")
	    '("p" "\\pi")
	    '("r" "\\rho")
	    '("s" "\\sigma")
	    '("t" "\\tau")
	    '("u" "\\upsilon")
	    '("f" "\\phi")
	    '("q" "\\chi")
	    '("y" "\\psi")
	    '("w" "\\omega")
	    '("D" "\\Delta")
	    '("G" "\\Gamma")
	    '("J" "\\Theta")
	    '("L" "\\Lambda")
	    '("X" "\\Xi")
	    '("P" "\\Pi")
	    '("S" "\\Sigma")
	    '("U" "\\Upsilon")
	    '("F" "\\Phi")
	    '("Y" "\\Psi")
	    '("W" "\\Omega")
	    '("ve" "\\varepsilon")
	    '("vf" "\\varphi")
	    '("<" "\\leq")
	    '(">" "\\geq")
	    '("=" "\\equiv")
	    '("==" "\\cong")
	    '("." "\\cdot")
	    '("pm" "\\pmod{}")
	    '("A" "\\forall")
	    '("i" "\\in")
	    '("I" "\\infty")
	    '("[" "\\subseteq")
	    '("]" "\\supseteq")
	    '("(" "\\supset")
	    '(")" "\\supset")))

     (defun setup-abbrevs ()
       "My function to replace auctex math symbol expansion"
       (interactive)
       (let* ((key (read-string "Symbol: "))
	      (str (cadr (assoc key abbrev-pairs))))
	 (insert str)))

     (defun end-exit-paren ()
       "use closing pasenthesis to exit the parenthesis"
       (interactive)
       (let ((ch (char-after nil)))
	 (cond ((eq ch ?\)) (forward-char))
	       ((eq ch ?\}) (forward-char))
	       ((eq ch ?\]) (forward-char))
	       ((eq ch ?\$) (forward-char))
	       (t (insert ")")))))

     (defun open-paren ()
       "open parenthesis inserts a matching pair"
       (interactive)
       (progn
	 (insert "()")
	 (backward-char)))

     (defun open-curly ()
       "open curly inserts a matching pair"
       (interactive)
       (progn
	 (insert "{}")
	 (backward-char)))

     (defun insert-def ()
       "my function to insert defs of tex documents easily"
       (interactive)
       (let ((name (read-string "Enter macro name: "))
	     (body (buffer-substring-no-properties (mark) (point))))
	 (if (use-region-p)
	     (progn (kill-region (region-beginning) (region-end))
		    (insert (format "\\%s" name))
		    (save-excursion
		      (goto-char (point-min))
		      (setq temp (search-forward-regexp "^\\\\def" nil t))
		      (when temp
			(message "Macro inserted.")
			(re-search-forward "

     " nil t)
			(forward-line -1)
			(insert (format "\\def\\%s{%s}\n" name body))))
		    (if (not temp)
			(save-excursion (message "No defs found, insert in the above paragragh.")
					(backward-paragraph)
					(insert (format "\n\\def\\%s{%s}" name body)))))
	   (message "Please activate region which contains the definiton before inserting the def"))))
     (defun one-def ()
       "insert defonetext instead of def"
       (interactive)
       (let ((name (read-string "Enter macro name: ")))
	 (progn (insert (format "\\%s" (downcase name)))
		(save-excursion
		  (goto-char (point-min))
		  (setq temp (search-forward-regexp "^\\\\def" nil t))
		  (when temp
		    (message "Macro inserted.")
		    (forward-paragraph)
		    (insert (format "\\defonetext{%s}\n" name))))
		(if (not temp)
		    (save-excursion (message "No defs found, insert in the above paragragh.")
				    (backward-paragraph)
				    (insert (format "\n\\defonetext{%s}" name)))))))

     (defun two-def ()
       "insert deftwotext instead of def"
       (interactive)
       (let ((name (downcase (read-string "Enter macro name: ")))
	     (body (buffer-substring-no-properties (mark) (point))))
	 (if (use-region-p)
	     (progn (kill-region (region-beginning) (region-end))
		    (insert (format "\\%s" name))
		    (save-excursion
		      (goto-char (point-min))
		      (setq temp (search-forward-regexp "^\\\\def" nil t))
		      (when temp
			(message "Macro inserted.")
			(forward-paragraph)
			(insert (format "\\deftwotext{%s}{%s}\n" name body))))
		    (if (not temp)
			(save-excursion (message "No defs found, insert in the above paragragh.")
					(backward-paragraph)
					(insert (format "\n\\deftwotext{%s}{%s}" name body)))))
	   (message "Please activate region which contains the definiton before inserting the def"))))

     (defun get-defs ()
       "Collect all the defs in the tex document"
       (interactive)
       (save-excursion
	 (beginning-of-buffer)
	 (let ((res '()))
	   (while (re-search-forward "^\\\\def" nil t)
	     (let ((s (buffer-substring-no-properties (- (point) 4)
						      (progn
							(end-of-line)
							(point)))))
	       (setq res (cons s res))))
	   res)))

     (defun find-macro-name (x)
       "find the name of a tex macro"
       (let* ((ind (string-match "{" x))
	      (content (substring x 0 ind)))
	 (cond
	  ((string-equal content "\\defonetext")
	   (concat "\\" (downcase (substring x (+ 1 ind) (string-match "}" x)))))
	  ((string-equal content "\\deftwotext")
	   (concat "\\" (downcase (substring x (+ 1 ind) (string-match "}" x)))))
	  (t
	   (substring x 4 ind)))))

     (defun read-tex-complete ()
       "my function to find all defs and use ivy as backend to complete it, assuming all defs come at the beginning of line"
       (interactive)
       (ivy-read "defs: "
		 (get-defs)
		 :action '(1
			   ("o" (lambda (x)
				  (insert (format "%s" (find-macro-name x))))
			    "Default action: insert macro name.")
			   ("m" (lambda (x)
				  (message (format "%s" (find-macro-name x))))
			    "Message the macro name instead of inserting it."))))

   #+END_SRC
** Moving around
   Try to make navigating tex files become easier and easier.

   #+BEGIN_SRC emacs-lisp
     (defun make-blank-space (arg)
       "To make enough space to put something in. Default to up, with arg down"
       (interactive "P")
       (if (null arg)
	   (progn
	     (beginning-of-line)
	     (open-line 3)
	     (forward-line)
	     (indent-according-to-mode))
	 (progn
	   (end-of-line)
	   (open-line 3)
	   (forward-line 2)
	   (indent-according-to-mode))))
   #+END_SRC
