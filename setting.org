#+TITLE: Durand's Emacs
#+AUTHOR: Durand
#+OPTIONS: toc:nil num:nil
* Taken from internet 

#+BEGIN_SRC emacs-lisp
  (setq delete-old-versions -1 )		; delete excess backup versions silently
  (setq version-control t )		; use version control
  (setq vc-make-backup-files t )		; make backups file even when in version controlled dir
  (setq backup-directory-alist `(("." . "~/.emacs.d/backups")) ) ; which directory to put backups file
  (setq vc-follow-symlinks t )				       ; don't ask for confirmation when opening symlinked file
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)) ) ;transform backups file name
  (setq inhibit-startup-screen t )	; inhibit useless and old-school startup screen
  (setq ring-bell-function 'ignore )	; silent bell when you make a mistake
  ;; (setq coding-system-for-read 'utf-8 )	; use utf-8 by default
  ;; UTF-8 as default encoding
  (set-language-environment "UTF-8")
  (setq coding-system-for-write 'utf-8 )
  (setq sentence-end-double-space nil)	; sentence SHOULD end with only a point.
  (setq default-fill-column 80)		; toggle wrapping text at the 80th character
  (setq initial-scratch-message "Hello!") ; print a default message in the empty scratch buffer opened at startup

  (setq-default display-line-numbers 'relative)
  (setq-default display-line-numbers-current-absolute t)
  (global-set-key [?\s-x] (lambda ()
				(interactive)
				(if (eq display-line-numbers 'relative)
				    (setq display-line-numbers nil)
				  (setq display-line-numbers 'relative))))
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (menu-bar-mode -1)
  (setq mac-option-key-is-meta t)
  (setq mac-right-option-modifier nil)
  (add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
  (global-set-key "\M-'" 'insert-quotations)
  (global-set-key "\M-\"" 'insert-quotes)
  ;; (global-set-key (kbd "C-'") 'insert-backquote)

  ;;;###autoload
  (defun insert-quotations (&optional arg)
    "Enclose following ARG sexps in quotation marks.
  Leave point after open-paren."
    (interactive "*P")
    (insert-pair arg ?\' ?\'))

  ;;;###autoload
  (defun insert-quotes (&optional arg)
    "Enclose following ARG sexps in quotes.
  Leave point after open-quote."
    (interactive "*P")
    (insert-pair arg ?\" ?\"))

  ;;;###autoload
  (defun insert-backquote (&optional arg)
    "Enclose following ARG sexps in quotations with backquote.
  Leave point after open-quotation."
    (interactive "*P")
    (insert-pair arg ?\` ?\'))
#+END_SRC

* Custom settings

** Copy-line function and indent-region-or-buffer

 #+BEGIN_SRC emacs-lisp
   ;;;###autoload
   (defun copy-line (arg)
     "Copy line accoring to ARG"
     (interactive "p")
     (let ((beg (line-beginning-position))
	   (end (line-end-position arg)))
       (kill-ring-save beg end nil)
       (kill-append "\n" nil)))


   (global-set-key [?\M-k] 'copy-line)

   ;;;###autoload
   (defun indent-buffer ()
     "Indent the currently visited buffer."
     (interactive)
     (indent-region (point-min) (point-max)))

   ;;;###autoload
   (defun indent-region-or-buffer ()
     "Indent a region if selected, otherwise the whole buffer."
     (interactive)
     (save-excursion
       (if (region-active-p)
	   (progn
	     (indent-region (region-beginning) (region-end))
	     (message "Indented selected region."))
	 (progn
	   (indent-buffer)
	   (message "Indented buffer.")))))
   (global-set-key [?\C-c ?/] 'indent-region-or-buffer)
 #+END_SRC

** kill-line function

 #+BEGIN_SRC emacs-lisp
   ;;;###autoload
   (defun backward-kill-line (arg)
     "Kill ARG lines backward"
     (interactive "p")
     (kill-line (- 1 arg)))
   (global-set-key [?\\] 'self-insert-command)
   (global-set-key [s-backspace] 'backward-kill-line)
   (global-set-key [?\C--] 'undo)
   (global-set-key [f12] 'undo)

#+END_SRC

** change font

#+BEGIN_SRC emacs-lisp
  ;;;(set-face-attribute 'default (selected-frame) :height 120)
  ;;;(set-face-attribute 'mode-line nil :height 200)
  (set-default-font "Menlo 20")

  (defun my-minibuffer-setup ()
    (set (make-local-variable 'face-remapping-alist)
	 '((default :height 1.1))))

  (add-hook 'minibuffer-setup-hook 'my-minibuffer-setup)

  (with-current-buffer (get-buffer " *Echo Area 0*") 
    (setq-local face-remapping-alist '((default (:height 1.2) variable-pitch))))

  (with-current-buffer (get-buffer " *Echo Area 1*")
    (setq-local face-remapping-alist '((default (:height 1.2) variable-pitch))))
#+END_SRC

** only window

#+BEGIN_SRC emacs-lisp
  (global-set-key [?\s-w] 'delete-other-windows)

  ;; (defun scroll-half-page-down ()
  ;;   "scroll down half the page"
  ;;   (interactive)
  ;;   (scroll-down (/ (window-body-height) 2)))

  ;; (defun scroll-half-page-up ()
  ;;   "scroll up half the page"
  ;;   (interactive)
  ;;   (scroll-up (/ (window-body-height) 2)))
#+END_SRC

** org settings

#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure t
    :defer t
    :config
    (setq org-todo-keywords '((sequence "TODO" "START" "WORKING" "HARD-WORKING" "ALMOST" "|" "DONE")))
    (global-set-key "\C-cl" 'org-store-link)
    (global-set-key "\C-cc" 'org-capture)
    (global-set-key "\C-ca" 'org-agenda)
    (global-set-key "\C-cb" 'org-iswitchb)
    (add-hook 'org-mode-hook '(lambda ()
				(define-key org-mode-map [?\ù] 'org-advance)
				(define-key org-mode-map [?\ç] 'org-retreat)))
    (define-key org-mode-map [f8] 'org-calc-account)
    (advice-add 'org-edit-special :after '(lambda (orig-fun) (delete-other-windows)))
    (set-face-attribute 'org-block nil :background "black" :foreground "orange"))


  ;;;###autoload
  (defun org-advance (x)
    (interactive "P")
    (when (buffer-narrowed-p)
      (beginning-of-buffer)
      (widen)
      (if (not x)
	  (org-next-visible-heading 1)
	(org-forward-heading-same-level 1)))
    (org-narrow-to-subtree))

  ;;;###autoload
  (defun org-retreat (x)
    (interactive "P")
    (when (buffer-narrowed-p)
      (beginning-of-buffer)
      (widen)
      (if (not x)
	  (org-previous-visible-heading 1)
	(org-backward-heading-same-level 1)))
    (org-narrow-to-subtree))

  ;;;###autoload
  (defun org-get-account-num ()
    "count how many days have been tagged 'account'"
    (interactive)
    (length (org-map-entries t "account")))

  ;;;###autoload
  (defun org-get-account-total ()
    "get the total value of the accuont values"
    (interactive)
    (apply '+ (mapcar 'string-to-number
		      (org-map-entries (lambda ()
					 (org-entry-get nil "TOTAL")) "account"))))
  ;;;###autoload
  (defun org-calc-account ()
    "sum up my accounts entries, one can limit the entries to sum by the tag 'account'"
    (interactive)
    (let* ((days (org-get-account-num))
	   (total (org-get-account-total))
	   (ave (/ total days)))
      (message (concat
		(number-to-string days)
		" days, spent "
		(number-to-string total)
		" with average "
		(number-to-string ave)))))

  ;; just in case I need this
  ;; (defun org-retrieve-value ()
  ;;   "retrieve value from property drawer"
  ;;   (org-element-map (org-element-parse-buffer) 'property-drawer (lambda (hl)
  ;; 								 (nth 3 (nth 1 (assoc 'node-property hl))))))
#+END_SRC

** custom configs

#+BEGIN_SRC emacs-lisp
  (toggle-truncate-lines -1)
  (global-set-key (kbd "C-c h") 'beginning-of-buffer)
  (global-set-key (kbd "C-c g") 'end-of-buffer)
  (global-set-key (kbd "C-c j") 'delete-indentation)
  (global-set-key (kbd "M-f") 'forward-to-word)
  (global-set-key (kbd "M-b") 'backward-word)
  (global-set-key (kbd "M-F") 'forward-word)
  (global-set-key (kbd "s-(") 'backward-paragraph)
  (global-set-key (kbd "s-)") 'forward-paragraph)
  (global-set-key (kbd "<f10>") 'save-buffer)
  (global-set-key (kbd "s-b") '(lambda ()
				 "switch to the most recent buffer"
				 (interactive)
				 (switch-to-buffer (other-buffer))))
  (global-set-key (kbd "s-B") 'switch-to-buffer)
  (global-set-key (kbd "s-k") '(lambda ()
				 "kill recent buffer"
				 (interactive)
				 (kill-buffer (current-buffer))))
  (global-set-key (kbd "s-K") 'kill-buffer)
  (global-set-key [?\s-j] '(lambda ()
			     "join line backwards, as I am more used to that
				   behaviour."
			     (interactive)
			     (join-line -1)))
  (global-set-key [?\M-&] 'query-replace-regexp)
  ;;;###autoload
  (defun open-line-below ()
    "o in vim"
    (interactive)
    (progn
      (end-of-line)
      (open-line 1)
      (forward-line)
      (indent-according-to-mode)))
  (global-set-key [?\C-o] 'open-line-below)
  (add-hook 'dired-mode-hook 'dired-hide-details-mode)
  (setq make-backup-files nil)
  ;;;###autoload
  (defun eval-rep ()
    "my eval replace"
    (interactive)
    (kill-sexp -1)
    (insert (format "%S" (eval (read (current-kill 0))))))
  (global-set-key [?\M-\s-ê] 'eval-rep)
  (add-hook 'lisp-mode-hook 'show-paren-mode)
  (add-hook 'emacs-lisp-mode-hook 'show-paren-mode)
  (add-hook 'lisp-interaction-mode-hook 'show-paren-mode)
  (global-set-key [?\C-c ?v] 'view-mode)
  (add-hook 'doc-view-mode-hook 'auto-revert-mode)
  (global-set-key [?\C-x ?r ?s] 'bookmark-save)
  (global-set-key [?\M-Z] 'zap-up-to-char)
  (setq flyspell-issue-message-flag nil)
  ;;;###autoload
  (defun ask-before-quit-advice (orig-func &rest args)
    (let ((answer (read-char-choice "Do you really want to quit?" '(?y ?n))))
      (if (char-equal answer ?y)
	  (apply orig-func args)
	(message "You're welcomed!"))))

  (advice-add 'save-buffers-kill-terminal :around 'ask-before-quit-advice)
  (setq initial-frame-alist '((width . 118)))
  (global-set-key [?\C-*] 'clean-up-buffers)
  ;;;###autoload
  (defun clean-up-buffers ()
    "Clean up some buffers that I oft do not need to keep around"
    (interactive)
    (cl-loop for buffer being the buffers
	     do (and (is-not-needed-buffer buffer)
		     (kill-buffer (buffer-name buffer))))
    (setq recentf-list '()))

  ;;;###autoload
  (defun is-not-needed-buffer (buf)
    "Match some buffers I do not want to keep around"
    (let ((name (buffer-name buf)))
      (or (and (= ?* (aref name 0))
	       (not (string-match "^\\*scratch\\*$" name))
	       (not (string-match "^\\*Messages\\*$" name)))
	  (string-match "^magit" name))))
#+END_SRC

** load default theme
   #+BEGIN_SRC emacs-lisp
     ;; (load-theme 'leuven)
     ;; (load-theme 'nimbus t)
     (load-theme 'nimbus-tex-im t)
     ;; (load-theme 'default-black)
     ;; (load-theme 'my_theme t)
   #+END_SRC

** iy-go-to-char

#+BEGIN_SRC emacs-lisp
  (use-package iy-go-to-char
    :ensure t
    :defer t
    :config
    (global-set-key "\M-m" 'iy-go-to-char)
    (global-set-key "\M-p" 'iy-go-to-char-backward))
#+END_SRC

** expand-region

   #+BEGIN_SRC emacs-lisp
     (use-package expand-region
       :ensure t
       :defer t
       :config
       (global-set-key (kbd "C-$") 'er/expand-region)
       (pending-delete-mode t))
   #+END_SRC

** company mode

#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :defer t
    :config
    (global-company-mode)
    (global-set-key (kbd "C-x <") 'company-complete)
    (company-flx-mode +1))
#+END_SRC

** tex commands
   I might consider constructing the A.S.T. of a mathematical equation, and manipulate it later.
   I think this is not much harder than an expression calculator implementation I have done in Haskell before.
   
   I am not sure if this is a good idea now: This seems pretty useless honestly.
   The aid to typing mathematics is quite different from the structural editing in programming,
   and needs a totally different mechanism I suppose.

#+BEGIN_SRC emacs-lisp
  (org-babel-load-file "/Users/durand/.emacs.d/my_packages/tex.org")
#+END_SRC

** wrap region
#+BEGIN_SRC emacs-lisp
  (use-package wrap-region
    :ensure t
    :defer t
    :config
    (wrap-region-global-mode t)
    (wrap-region-add-wrapper "$" "$"))
  ;; (wrap-region-add-wrapper "=" "=")
  ;; (wrap-region-add-wrapper "-" "-")
#+END_SRC

** paredit cope with characters
#+BEGIN_SRC emacs-lisp
  ;; (global-set-key (kbd "C-c )") 'paredit-forward-barf-sexp)
  ;; (global-set-key (kbd "C-c (") 'paredit-backward-barf-sexp)
  ;; (global-set-key [?\C-\(] 'paredit-mode)
#+END_SRC

** YASnippet

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :defer t
    :config
    (define-key yas-minor-mode-map (kbd "C-c y") #'yas-expand)
    (setq yas-snippet-dirs '("~/.emacs.d/my_snippets"))
    (yas-global-mode t))
#+END_SRC

** multiple-cursors
   #+BEGIN_SRC emacs-lisp
     ;; (use-package multiple-cursors :ensure t
     ;;   :config
     ;;   (global-set-key (kbd "C-<") 'mc/mark-next-like-this)
     ;;   (global-set-key (kbd "M-<") 'mc/mark-previous-like-this)
     ;;   (global-set-key (kbd "C-c M-<") 'mc/mark-all-like-this)
     ;;   (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines))
   #+END_SRC

** My Keyboard Macros
   #+BEGIN_SRC emacs-lisp
     (fset 'ud
	[?\C-c ?g ?\C-r ?t ?b ?l ?f ?m return ?\C-c ?\C-c ?\C-r ?t ?b ?l ?f ?m return ?\C-c ?\C-c ?\C-r ?s ?u ?m return tab ?\C-$ ?\M-w ?\C-c ?\C-p ?\C-c ?\C-x ?P ?t ?o ?t ?a ?l ?: ?  ?\C-y ?\C-\M-j])
     (fset 'na
	[?c ?\C-x ?u ?\C-c ?g ?\C-c ?\C-p ?\C-c ?\C-x ?\M-w ?\C-c ?g ?\C-c ?\C-x ?\C-y tab ?\M-m ?< S-right ?\C-n ?\C-n ?\C-n ?\C-n ?\M-m ?< S-right ?\C-n ?\C-n ?\M-p ?< S-right ?\C-n ?\C-n ?\C-n ?\C-n ?\C-n tab ?l ?u ?n ?c ?h tab ?0 tab ?t ?o ?  ?d ?o tab])
   #+END_SRC

** ivy-swiper-counsel
   #+BEGIN_SRC emacs-lisp
     (use-package counsel
       :ensure t
       :defer 1
       :config
       (ivy-mode 1)
       (counsel-mode 1)
       (setq ivy-use-virtual-buffers t)
       (global-set-key [?\s-s] 'swiper)
       (setq ivy-count-format "(%d/%d) ")
       (global-set-key [?\s-f] 'counsel-find-file)
       (global-set-key [?\M-x] 'counsel-M-x)
       (setq ivy-use-selectable-prompt t))

     (use-package ivy
       :ensure t
       :defer 1
       :config
       (setq ivy-re-builders-alist
	     '((swiper . ivy--regex-ignore-order)
	       (t . ivy--regex-fuzzy)))
       (ivy-set-actions
	'ivy-switch-buffer
	'(("k"
	   (lambda (x)
	     (kill-from-recentf x)
	     (ivy--reset-state ivy-last))
	   "kill"))))
     ;;;###autoload
     (defun kill-from-recentf (buf)
       "remove the buffer from the recentf list"
       (interactive)
       (if (get-buffer buf)
	   (kill-buffer buf)
	 (setq recentf-list (delete (cdr (assoc buf ivy--virtual-buffers)) recentf-list))))
   #+END_SRC

** mode line customizations
   #+BEGIN_SRC emacs-lisp
     (column-number-mode 1)
     (set-face-attribute 'mode-line-buffer-id nil :background "deep sky blue"
			 :foreground "orange")
     (set-face-attribute 'mode-line-highlight nil :box nil :background "deep sky blue")
     (set-face-attribute 'mode-line-inactive  nil :background "gray" :foreground "black")

     (setq mode-line-position
	   '(;; %p print percent of buffer above top of window, or Top, Bot or All
	     ;; (-3 "%p")
	     " "
	     ;; %I print the size of the buffer, with kmG etc
	     ;; (size-indication-mode ("/" (-4 "%I")))
	     ;; " "
	     ;; %l print the current line number
	     ;; %c print the current column
	     (line-number-mode ("%l" (column-number-mode ":%c")))))

     (setq-default mode-line-buffer-identification
		   (propertized-buffer-identification " %b "))

     (defun my-mode-line-modified ()
       (concat
	(if (and (buffer-modified-p)
		 (not (string-prefix-p "*" (buffer-name))))
	    "US "
	  (if (string-prefix-p "*" (buffer-name))
	      "NO "
	    " "))
	(if buffer-read-only
	    "RO "
	  " ")))

     (setq-default mode-line-format
		   '("%e"
		     mode-line-front-space
		     ;; mode-line-mule-info -- I'm always on utf-8
		     mode-line-client
		     (:eval (my-mode-line-modified))
		     ;; mode-line-remote -- no need to indicate this specially
		     ;; mode-line-frame-identification -- this is for text-mode emacs only
		     " "
		     mode-line-buffer-identification
		     " "
		     ;; mode-line-position
		     ;;(vc-mode vc-mode)  -- I use magit
		     ;; (flycheck-mode flycheck-mode-line) -- I don't have this
		     " %m " ;; Only major mode
		     mode-line-misc-info
		     mode-line-end-spaces
		     ;; mode-line-modes -- I don't want all those minor modes information
		     ))
     (set-face-attribute 'mode-line nil
			 :background "light blue" :foreground "black" :height 1.3)
   #+END_SRC

** parinfer
   Temporarily it is disabled as I found lispy to be more convenient:
   Parinfer mess my code while it tries to "infer" the parens. With the intervention
   of electric-indent-mode, this is worse, and gives me a lot of frustration.
   #+BEGIN_SRC emacs-lisp
     ;; (use-package parinfer
     ;;   :ensure t
     ;;   :bind
     ;;   (("C-," . parinfer-toggle-mode))
     ;;   :init
     ;;   (progn
     ;;     (setq parinfer-extensions
     ;; 	  '(defaults       ; should be included.
     ;; 	     pretty-parens  ; different paren styles for different modes.
     ;; 	     paredit        ; Introduce some paredit commands.
     ;; 	     smart-tab      ; C-b & C-f jump positions and smart shift with tab & S-tab.
     ;; 	     smart-yank))   ; Yank behavior depend on mode.
     ;;     (add-hook 'clojure-mode-hook #'parinfer-mode)
     ;;     (add-hook 'emacs-lisp-mode-hook #'parinfer-mode)
     ;;     (add-hook 'lisp-interaction-mode-hook #'parinfer-mode)
     ;;     (add-hook 'lisp-mode-hook #'parinfer-mode)))

     ;; (defun indent-between-parens ()
     ;;   "try to implement a function to auto-indent between parens"
     ;;   (interactive)
     ;;   (let ((cur (current-column)))
     ;;     (save-excursion
     ;;       (next-line -1)
     ;;       (if (search-forward "(" nil t)
     ;; 	  (setq temp (current-column))
     ;; 	(setq temp cur)))  
     ;;     (insert (make-string (- temp cur 1) ? ))))

     ;; (defun dedent-between-parens ()
     ;;   "try to implement a function to auto-indent between parens"
     ;;   (interactive)
     ;;   (let ((cur (current-column)))
     ;;     (save-excursion
     ;;       (next-line -1)
     ;;       (if (search-backward "(" nil t)
     ;; 	  (setq temp (current-column))
     ;; 	(setq temp cur)))  
     ;;     (backward-delete-char (- cur temp))))





   #+END_SRC

** lispy mode
   This is better than parinfer IMO.
   #+BEGIN_SRC emacs-lisp
     (use-package lispy
       :ensure t
       :defer 5
       :config
       (add-hook 'emacs-lisp-mode-hook 'lispy-mode)
       (add-hook 'lisp-mode-hook 'lispy-mode)
       (add-hook 'lisp-interaction-mode-hook 'lispy-mode))
   #+END_SRC
** Archive
   Just in case I need to do stuff with ivy, this is a basic toy template to interact with it.
   #+BEGIN_SRC emacs-lisp
     ;; (defun test ()
     ;;   "just to test"
     ;;   (interactive)
     ;;   (ivy-read "test" '(("First option" "first text" "option 1")
     ;; 		     ("Second option" "second text") ("third" "third text" "option 2")
     ;; 		     ("and fourth option" "fourth text" "fourth option"))
     ;; 	    :action '(1
     ;; 		      ("o" (lambda (x)
     ;; 			     (interactive)
     ;; 			     (with-ivy-window
     ;; 			       (insert (format "%s" (elt x 1)))))
     ;; 		       "hey")
     ;; 		      ("p" (lambda (x)
     ;; 			     (interactive)
     ;; 			     (with-ivy-window
     ;; 			       (insert (format "%s" (elt x 2)))))
     ;; 		       "haaaa"))))
   #+END_SRC
** magit
   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :ensure t
       :defer 10
       :config
       (global-set-key [?\C-x ?g] 'magit-status))
   #+END_SRC
** slime
   #+BEGIN_SRC emacs-lisp
     (setq inferior-lisp-program "/usr/local/bin/sbcl")
     (use-package slime
       :ensure t 
       :defer 10
       :config
       (define-key slime-mode-map [?\C-x ?\C-e] 'slime-eval-last-expression))
   #+END_SRC
** music
   My own music plugin.
   #+BEGIN_SRC emacs-lisp
     (load-file "~/.emacs.d/my_packages/music/music.el")
   #+END_SRC
** iedit-mode
   I think this can totally replace the use of multiple cursors that I
   can think of, totally.
   #+BEGIN_SRC emacs-lisp
     (use-package iedit :ensure t
       :defer 10
       :config
       ;; bind to "C-;", the number is produced by the function kbd
       (global-set-key [67108923] 'iedit-mode))
   #+END_SRC
** esup
   start-up profiling
   #+BEGIN_SRC emacs-lisp
     (use-package esup
       :ensure t
       :defer t)
   #+END_SRC
